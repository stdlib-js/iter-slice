{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar format = require( '@stdlib/string-format' );\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\n\n\n// VARIABLES //\n\nvar BEGIN = 0;\nvar END = 1e308;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns a subsequence of iterated values from a provided iterator.\n*\n* @param {Iterator} iterator - input iterator\n* @param {NonNegativeInteger} [begin=0] - start iteration index (inclusive)\n* @param {NonNegativeInteger} [end=1e308] - end iteration index (non-inclusive)\n* @throws {TypeError} first argument must be an iterator protocol-compliant object\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a nonnegative integer\n* @returns {Iterator} iterator\n*\n* @example\n* var randu = require( '@stdlib/random-iter-randu' );\n*\n* var iter = iterSlice( randu(), 10, 20 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterSlice( iterator, begin, end ) {\n\tvar iter;\n\tvar FLG;\n\tvar N;\n\tvar M;\n\tvar n;\n\tvar i;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `%s`.', iterator ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNonNegativeInteger( begin ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', begin ) );\n\t\t}\n\t\tN = begin;\n\t\tif ( arguments.length > 2 ) {\n\t\t\tif ( !isNonNegativeInteger( end ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%s`.', end ) );\n\t\t\t}\n\t\t\tM = end;\n\t\t} else {\n\t\t\tM = END;\n\t\t}\n\t} else {\n\t\tN = BEGIN;\n\t\tM = END;\n\t}\n\tn = M - N;\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', finish );\n\n\t// If an environment supports `Symbol.iterator` and a provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\ti += 1;\n\t\tif ( n > 0 && i < N ) {\n\t\t\t// Lazily consume the first `N` values from the provided iterator...\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tv = iterator.next();\n\t\t\t}\n\t\t}\n\t\tif ( v && v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tn -= 1;\n\t\tif ( n < 0 ) {\n\t\t\tFLG = true;\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t}\n\t\treturn v;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction finish( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterSlice( iterator[ iteratorSymbol ](), N, M );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterSlice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which returns a subsequence of iterated values from a provided iterator.\n*\n* @module @stdlib/iter-slice\n*\n* @example\n* var randu = require( '@stdlib/random-iter-randu' );\n* var iterSlice = require( '@stdlib/iter-slice' );\n*\n* var iter = iterSlice( randu(), 10, 20 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAuB,QAAS,uCAAwC,EAAE,YAC1EC,EAAa,QAAS,4BAA6B,EACnDC,EAAS,QAAS,uBAAwB,EAC1CC,EAAiB,QAAS,iCAAkC,EAC5DC,EAAiB,QAAS,yBAA0B,EAKpDC,EAAQ,EACRC,EAAM,MAgCV,SAASC,EAAWC,EAAUC,EAAOC,EAAM,CAC1C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACA,EACJ,GAAK,CAACZ,EAAgBK,CAAS,EAC9B,MAAM,IAAI,UAAWN,EAAQ,+FAAgGM,CAAS,CAAE,EAEzI,GAAK,UAAU,OAAS,EAAI,CAC3B,GAAK,CAACR,EAAsBS,CAAM,EACjC,MAAM,IAAI,UAAWP,EAAQ,gFAAiFO,CAAM,CAAE,EAGvH,GADAI,EAAIJ,EACC,UAAU,OAAS,EAAI,CAC3B,GAAK,CAACT,EAAsBU,CAAI,EAC/B,MAAM,IAAI,UAAWR,EAAQ,+EAAgFQ,CAAI,CAAE,EAEpHI,EAAIJ,CACL,MACCI,EAAIR,CAEN,MACCO,EAAIR,EACJS,EAAIR,EAEL,OAAAS,EAAID,EAAID,EACR,EAAI,GAGJF,EAAO,CAAC,EACRZ,EAAaY,EAAM,OAAQK,CAAK,EAChCjB,EAAaY,EAAM,SAAUM,CAAO,EAG/Bb,GAAkBH,EAAYO,EAAUJ,CAAe,CAAE,GAC7DL,EAAaY,EAAMP,EAAgBc,CAAQ,EAErCP,EAQP,SAASK,GAAO,CACf,IAAIG,EACJ,GAAKP,EACJ,MAAO,CACN,KAAQ,EACT,EAGD,GADA,GAAK,EACAG,EAAI,GAAK,EAAIF,EAEjB,IAAM,EAAI,EAAG,EAAIA,EAAG,IACnBM,EAAIX,EAAS,KAAK,EAGpB,OAAKW,GAAKA,EAAE,MACXP,EAAM,GACCO,IAERJ,GAAK,EACAA,EAAI,GACRH,EAAM,GACC,CACN,KAAQ,EACT,IAEDO,EAAIX,EAAS,KAAK,EACbW,EAAE,OACNP,EAAM,IAEAO,GACR,CASA,SAASF,EAAQG,EAAQ,CAExB,OADAR,EAAM,GACD,UAAU,OACP,CACN,MAASQ,EACT,KAAQ,EACT,EAEM,CACN,KAAQ,EACT,CACD,CAQA,SAASF,GAAU,CAClB,OAAOX,EAAWC,EAAUJ,CAAe,EAAE,EAAGS,EAAGC,CAAE,CACtD,CACD,CAKAhB,EAAO,QAAUS,ICrIjB,IAAIc,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isNonNegativeInteger", "isFunction", "format", "isIteratorLike", "iteratorSymbol", "BEGIN", "END", "iterSlice", "iterator", "begin", "end", "iter", "FLG", "N", "M", "n", "next", "finish", "factory", "v", "value", "main"]
}
